// screens/Gamescreen/Catchword.js
import React, { useMemo, useState, useEffect } from "react";
import { View, Text, TouchableOpacity, StyleSheet, ScrollView, Platform } from "react-native";
import { MaterialCommunityIcons as Icon } from "@expo/vector-icons";
import { post } from "../../api";

// ===== THEME =====
const ORANGE = {
  primary: "#FF8A1F",
  primaryDark: "#E67700",
  light: "#FFE7CC",
  pale: "#FFF6EC",
  border: "#FFD2A3",
  textMain: "#1F1300",
  textSub: "#4A3726",
};
const NEUTRAL = { bg: "#FFFDF9", line: "#F0E7DC", card: "#FFFFFF" };

// ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (ms) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏™‡∏µ‡∏ñ‡∏π‡∏Å/‡∏ú‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏°
const AUTO_NEXT_DELAY = 1000;

/* ===== Helper ===== */
const shuffle = (arr) => [...arr].sort(() => Math.random() - Math.random());
const sampleN = (arr, n) => shuffle(arr).slice(0, n);

// ‡∏Å‡∏•‡∏∏‡πà‡∏° emoji ‡∏ó‡∏µ‡πà ‚Äú‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‚Äù ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏™‡∏∏‡πà‡∏°‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏≠‡∏Å
const SIMILAR_GROUPS = [
  ["üèÄ","‚öΩ","üèê","üéæ","üèâ","ü•é","üèà","üèì","üè∏"],
  ["üöó","üöô","üöï","üöì","üöö","üöõ","üöú","üõª","üöí","üöë"],
  ["üëï","üëö","üëó","üß•","üëî","üëñ","üëò"],
  ["üêù","ü¶ã","üêû","üêú","ü™≤","ü¶ü","ü™∞"],
  ["‚úàÔ∏è","üöÅ","üöÄ","üõ´","üõ¨"],
  ["üìñ","üìö","üìò","üìï","üìí"],
  ["‚è∞","‚è±Ô∏è","üï∞Ô∏è","‚åõ","‚è≥"],
  ["üõèÔ∏è","üõå","üõãÔ∏è"],
  ["üî®","üîß","üî©","ü™ì","ü™õ"],
  ["üçú","üçù","üç≤","ü•ò"],
  ["üåä","‚õ≤","üíß","üèûÔ∏è"],
];

// ‡∏Ñ‡∏∑‡∏ô set ‡∏Ç‡∏≠‡∏á emoji ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏Å‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏£‡∏≤‡∏∞ ‚Äú‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‚Äù ‡∏Å‡∏±‡∏ö target
const similarSetOf = (emoji) => {
  for (const group of SIMILAR_GROUPS) {
    if (group.includes(emoji)) return new Set(group);
  }
  return new Set([emoji]);
};

// ‡∏Ñ‡∏•‡∏±‡∏á emoji ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏≠‡∏Å ‚Äú‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‚Äù)
const DISTRACTOR_POOL = [
  "üì±","üéß","üñ•Ô∏è","üß∏","üçï","üçî","üçü","üåÆ","üç©","üç™",
  "üê∂","üê±","ü¶ä","üêº","ü¶Ñ","ü¶à","ü¶ë","ü¶Ä",
  "üåã","üèùÔ∏è","üåà","‚òÄÔ∏è","üåô","‚≠ê","üî•","‚ùÑÔ∏è",
  "üéí","üíº","üí°","üî¶","üì∑","üé≤","üéØ","üéπ",
  "üö≤","üõ¥","üõµ","üöÜ","üöá","üö¢",
  "üè∞","‚õ©Ô∏è","‚õ™","üèØ","üè´","üè•",
  "üßÇ","üçØ","ü•´","ü´ô","üç∂","üç≥",
];

// ===== ‡∏Ñ‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 10 ‡∏Ç‡πâ‡∏≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏∏‡πà‡∏°) =====
const FULL_BANK = [
  { word: "‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•", correct: "üçé" },
  { word: "‡∏´‡∏°‡∏≤", correct: "üê∂" },
  { word: "‡∏û‡∏£‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", correct: "‚òÄÔ∏è" },
  { word: "‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤", correct: "üçï" },
  { word: "‡∏ß‡∏≤‡∏¨", correct: "üêã" },
  { word: "‡∏†‡∏π‡πÄ‡∏Ç‡∏≤", correct: "‚õ∞Ô∏è" },
  { word: "‡∏Å‡∏£‡∏∞‡∏ó‡∏∞", correct: "üç≥" },
  { word: "‡∏™‡∏°‡∏∏‡∏î", correct: "üìö" },
  { word: "‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á", correct: "ü•≠" },
  { word: "‡πÄ‡∏ï‡∏µ‡∏¢‡∏á‡∏ô‡∏≠‡∏ô", correct: "üõèÔ∏è" },
  { word: "‡∏Ñ‡πâ‡∏≠‡∏ô", correct: "üî®" },
  { word: "‡∏ä‡∏≤‡∏ß‡∏ô‡∏≤", correct: "üë®‚Äçüåæ" },
  { word: "‡∏Å‡∏£‡∏∞‡πÇ‡∏õ‡∏£‡∏á", correct: "üëó" },
  { word: "‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡∏ô‡πâ‡∏≥", correct: "üåä" },
  { word: "‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß", correct: "üçú" },
  { word: "‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤", correct: "‚è∞" },
  { word: "‡∏ö‡∏≤‡∏™‡πÄ‡∏Å‡∏ï‡∏ö‡∏≠‡∏•", correct: "üèÄ" },
  { word: "‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤", correct: "üëú" },
  { word: "‡∏Å‡∏£‡∏£‡πÑ‡∏Å‡∏£", correct: "‚úÇÔ∏è" },
  { word: "‡∏ú‡∏µ‡πÄ‡∏™‡∏∑‡πâ‡∏≠", correct: "ü¶ã" },
  { word: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô", correct: "‚úàÔ∏è" },
  { word: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á", correct: "üßÇ" },
  { word: "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤", correct: "üëü" },
  { word: "‡∏õ‡∏•‡∏≤‡∏´‡∏°‡∏∂‡∏Å", correct: "ü¶ë" },
  { word: "‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", correct: "üë©‚Äç‚öïÔ∏è" },
  { word: "‡πÅ‡∏à‡∏Å‡∏±‡∏ô", correct: "üè∫" },
  { word: "‡∏£‡∏ñ‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å", correct: "üöö" },
  { word: "‡πÑ‡∏ü‡∏â‡∏≤‡∏¢", correct: "üî¶" },
  { word: "‡∏Å‡∏ß‡∏≤‡∏á", correct: "ü¶å" },
  { word: "‡πÄ‡∏™‡∏∑‡πâ‡∏≠", correct: "üëï" },
  { word: "‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", correct: "üë©‚Äçüéì" },
  { word: "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á", correct: "üç≤" },
  { word: "‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô", correct: "üö≤" },
  { word: "‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ", correct: "üå≥" },
  { word: "‡∏£‡∏ñ‡πÑ‡∏ü", correct: "üöÜ" },
  { word: "‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á", correct: "üèì" },
  { word: "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠", correct: "üìñ" },
  { word: "‡∏ï‡∏≥‡∏£‡∏ß‡∏à", correct: "üëÆ" },
  { word: "‡∏ú‡∏±‡∏Å", correct: "ü•¶" },
];

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 4 ‡∏ï‡∏±‡∏ß (‡∏ñ‡∏π‡∏Å 1 + ‡∏´‡∏•‡∏≠‡∏Å 3) ‡πÇ‡∏î‡∏¢‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
function buildChoices(correct) {
  const ban = similarSetOf(correct);
  const pool = DISTRACTOR_POOL.filter((e) => !ban.has(e));
  const distractors = sampleN(pool, 3);
  return shuffle([correct, ...distractors]);
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° (word, correct, choices)
function buildQuestion(item) {
  return { ...item, choices: buildChoices(item.correct) };
}

/* ===== Component ===== */
export default function Matchingword({ navigation, email }) {
  const [phase, setPhase] = useState("intro");
  const [runId, setRunId] = useState(0); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡πà‡∏°‡∏ä‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‚Äú10 ‡∏Ç‡πâ‡∏≠‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‚Äù + ‡∏ú‡∏π‡∏Å choices ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà runId ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  const QUESTIONS = useMemo(
    () => shuffle(FULL_BANK).slice(0, 10).map(buildQuestion),
    [runId]
  );

  const [index, setIndex] = useState(0);
  const [score, setScore] = useState(0);
  const [picked, setPicked] = useState(null);
  const [isCorrect, setIsCorrect] = useState(null);

  const [startTime, setStartTime] = useState(0);
  const [elapsedTime, setElapsedTime] = useState(0);

  const total = QUESTIONS.length;
  const q = QUESTIONS[index];
  const choices = q.choices; // ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° (‡∏•‡∏î‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö/‡∏™‡∏±‡∏ö‡∏™‡∏ô)

  const saveResult = async () => {
    try {
      await post({
        action: "savegametime",
        email: (email || "").trim(),
        gameName: "‡πÄ‡∏Å‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ñ‡∏≥‡∏Å‡∏±‡∏ö‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥",
        playTime: elapsedTime,
        score: score,
        total: total, // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á
      });
    } catch (e) {
      console.warn("saveResult error:", e);
    }
  };

  const GameStartTime = () => {
    setRunId((v) => v + 1);       // ‚úÖ ‡∏™‡∏∏‡πà‡∏°‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
    setStartTime(Date.now());
    setElapsedTime(0);
    setIndex(0);
    setScore(0);
    setPicked(null);
    setIsCorrect(null);
    setPhase("quiz");
  };

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
  const choose = (emoji) => {
    if (picked) return;
    const ok = emoji === q.correct;
    setPicked(emoji);
    setIsCorrect(ok);
    if (ok) setScore((s) => s + 1);

    setTimeout(() => {
      if (index < total - 1) {
        setIndex((i) => i + 1);
        setPicked(null);
        setIsCorrect(null);
      } else {
        const endTime = Date.now();
        const durationMs = endTime - startTime;
        const totalSeconds = Math.floor(durationMs / 1000);
        const minutes = Math.floor(totalSeconds / 60);
        const seconds = totalSeconds % 60;
        const playTime = parseFloat(`${minutes}.${seconds.toString().padStart(2, "0")}`);
        setElapsedTime(Number(playTime.toFixed(2)));
        setPhase("result");
      }
    }, AUTO_NEXT_DELAY);
  };

  useEffect(() => {
    if (phase === "result" && elapsedTime > 0) {
      saveResult();
    }
  }, [phase, elapsedTime]);

  const restart = () => {
    setRunId((v) => v + 1);       // ‚úÖ ‡∏™‡∏∏‡πà‡∏°‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
    setStartTime(Date.now());
    setElapsedTime(0);
    setIndex(0);
    setScore(0);
    setPicked(null);
    setIsCorrect(null);
    setPhase("quiz");
  };

  return (
    <View style={styles.container}>
      {/* ===== TOPBAR ===== */}
      <View style={styles.topbar}>
        <View style={styles.topbarContent}>
          <Icon name="emoticon-outline" size={26} color={ORANGE.primaryDark} style={{ marginRight: 8 }} />
          <Text style={styles.topbarTitle}>‡πÄ‡∏Å‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ñ‡∏≥‡∏Å‡∏±‡∏ö Emoji</Text>
        </View>
      </View>

      {/* ===== INTRO ===== */}
      {phase === "intro" && (
        <ScrollView contentContainerStyle={styles.introWrap} showsVerticalScrollIndicator={false}>
          <View style={styles.introCard}>
            <View style={styles.introRow}>
              <Icon name="book-outline" size={26} color={ORANGE.primaryDark} />
              <Text style={styles.introText}>
                ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Emoji ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏±‡πâ‡∏ô
              </Text>
            </View>
            <View style={styles.introRow}>
              <Icon name="gesture-tap" size={26} color={ORANGE.primaryDark} />
              <Text style={styles.introText}>‡πÅ‡∏ï‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Emoji ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö</Text>
            </View>
            <View style={styles.introRow}>
              <Icon name="check-circle-outline" size={26} color={"#1DBF73"} />
              <Text style={styles.introText}>‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å = ‡∏Å‡∏£‡∏≠‡∏ö/‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß, ‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î = ‡∏™‡∏µ‡πÅ‡∏î‡∏á</Text>
            </View>
          </View>

          <View style={styles.introActions}>
            <TouchableOpacity style={styles.primaryBtn} onPress={GameStartTime} activeOpacity={0.9}>
              <Text style={styles.primaryBtnText}>‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°</Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      )}

      {/* ===== QUIZ ===== */}
      {phase === "quiz" && (
        <View style={{ flex: 1, alignItems: "center", paddingHorizontal: 24, paddingTop: 20 }}>
          {/* Header badges */}
          <View style={styles.headerRow}>
            <View style={styles.badge}>
              <Text style={styles.badgeText}>‡∏Ç‡πâ‡∏≠ {index + 1}/{total}</Text>
            </View>
            <View style={styles.badgeOutline}>
              <Text style={styles.badgeOutlineText}>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô {score}</Text>
            </View>
          </View>

          {/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå */}
          <View
            style={[
              styles.questionBox,
              picked && isCorrect === true && { borderColor: "#1DBF73", backgroundColor: "#c6f6d5" },
              picked && isCorrect === false && { borderColor: "#e11d48", backgroundColor: "#ffe4e6" },
            ]}
          >
            <Text style={styles.word}>{q.word}</Text>
          </View>

          {/* ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥ 2x2 */}
          <View style={styles.choicesGrid}>
            {choices.map((em, i) => {
              const isPicked = picked === em;
              let bg = "#f9f9f9";
              if (isPicked && isCorrect === true) bg = "#2ecc71";
              if (isPicked && isCorrect === false) bg = "#e74c3c";
              return (
                <TouchableOpacity
                  key={i}
                  style={[styles.choice, { backgroundColor: bg }]}
                  onPress={() => choose(em)}
                  activeOpacity={0.9}
                >
                  <Text style={styles.choiceEmoji}>{em}</Text>
                </TouchableOpacity>
              );
            })}
          </View>
        </View>
      )}

      {/* ===== RESULT ===== */}
      {phase === "result" && (
        <ScrollView contentContainerStyle={styles.resultWrap} showsVerticalScrollIndicator={false}>
          <View style={styles.resultCard}>
            <View style={{ flexDirection: "row", alignItems: "center", gap: 8 }}>
              <Icon name="flag-checkered" size={22} color={ORANGE.primaryDark} />
              <Text style={styles.resultTitle}>‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•</Text>
            </View>
            <Text style={styles.resultScore}>‡πÑ‡∏î‡πâ {score} / {total} ‡∏Ç‡πâ‡∏≠</Text>
            <View style={styles.resultBar}>
              <View style={[styles.resultFill, { width: `${(score / total) * 100}%` }]} />
            </View>
          </View>

          <View style={styles.resultActionsCenter}>
            <TouchableOpacity style={styles.primaryBtn} onPress={restart} activeOpacity={0.9}>
              <Text style={styles.primaryBtnText}>‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà)</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.primaryBtn, { backgroundColor: "#8e8e8e" }]}
              onPress={() => navigation?.goBack?.()}
              activeOpacity={0.9}
            >
              <Text style={styles.primaryBtnText}>‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏Å‡∏°</Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      )}
    </View>
  );
}

/* ===== Styles ===== */
const cardShadow = Platform.select({
  ios: { shadowColor: "#000", shadowOpacity: 0.06, shadowRadius: 10, shadowOffset: { width: 0, height: 4 } },
  android: { elevation: 2 },
  default: {},
});

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: NEUTRAL.bg },

  // Topbar
  topbar: {
    paddingTop: 14, paddingBottom: 14, paddingHorizontal: 16,
    backgroundColor: NEUTRAL.card, borderBottomWidth: 1, borderBottomColor: NEUTRAL.line,
  },
  topbarContent: { flexDirection: "row", alignItems: "center", alignSelf: "center", maxWidth: "92%" },
  topbarTitle: { fontSize: 26, fontWeight: "900", color: ORANGE.textMain, textAlign: "center", flexShrink: 1 },

  // Intro
  introWrap: { padding: 18, alignItems: "center" },
  introCard: {
    backgroundColor: NEUTRAL.card, borderRadius: 18, borderWidth: 2, borderColor: ORANGE.border,
    padding: 18, width: "100%", ...cardShadow,
  },
  introRow: { flexDirection: "row", alignItems: "center", gap: 12, marginBottom: 12 },
  introText: { fontSize: 18, color: ORANGE.textSub, flexShrink: 1, lineHeight: 26 },
  introActions: { marginTop: 14, gap: 10, alignItems: "center", width: "100%" },
  primaryBtn: {
    backgroundColor: ORANGE.primary, paddingVertical: 20, paddingHorizontal: 28,
    borderRadius: 16, minWidth: 260, alignItems: "center", ...cardShadow,
  },
  primaryBtnText: { color: "#FFFFFF", fontSize: 22, fontWeight: "900", letterSpacing: 0.3 },

  // Quiz 
  headerRow: {
    width: "100%", flexDirection: "row", justifyContent: "space-between", marginBottom: 10,
  },
  badge: {
    backgroundColor: ORANGE.primary, paddingHorizontal: 14, paddingVertical: 8, borderRadius: 12,
  },
  badgeText: { color: "#fff", fontWeight: "800", fontSize: 18 },
  badgeOutline: {
    borderWidth: 2, borderColor: ORANGE.primary, paddingHorizontal: 14, paddingVertical: 8, borderRadius: 12,
  },
  badgeOutlineText: { color: ORANGE.primary, fontWeight: "800", fontSize: 18 },

  questionBox: {
    borderWidth: 3, borderColor: ORANGE.primary, borderRadius: 18,
    padding: 24, marginTop: 18, marginBottom: 22, backgroundColor: "#fff", width: "100%", alignItems: "center",
  },
  word: { fontSize: 48, fontWeight: "900", color: "#1A1A1A", textAlign: "center" },

  choicesGrid: {
    width: "100%", flexDirection: "row", flexWrap: "wrap", justifyContent: "space-between", paddingHorizontal:20,marginBottom: 20,
  },
  choice: {
    width: "45%", aspectRatio: 1, borderRadius: 22, justifyContent: "center", alignItems: "center",
    backgroundColor: "#f9f9f9", marginBottom: 10,
    shadowColor: "#000", shadowOpacity: 0.08, shadowRadius: 6,
    shadowOffset: { width: 0, height: 4 }, elevation: 3,
  },
  choiceEmoji: { fontSize: 64, lineHeight: 70, textAlign: "center" },

  // Result
  resultWrap: { padding: 18, paddingTop: 36, alignItems: "center" },
  resultCard: {
    backgroundColor: NEUTRAL.card, borderRadius: 18, borderWidth: 2, borderColor: ORANGE.border,
    padding: 22, width: "100%", alignItems: "center", marginBottom: 14, ...cardShadow,
  },
  resultTitle: { fontSize: 22, fontWeight: "900", color: ORANGE.textMain },
  resultScore: { fontSize: 18, color: ORANGE.textSub, marginTop: 6, marginBottom: 12 },
  resultBar: { width: "100%", height: 12, backgroundColor: ORANGE.pale, borderRadius: 999, overflow: "hidden" },
  resultFill: { height: "100%", backgroundColor: "#1DBF73" },

  resultActionsCenter: { width: "100%", gap: 12, alignItems: "center" },
  secondaryBtn: {
    backgroundColor: ORANGE.light, paddingVertical: 16, paddingHorizontal: 22,
    borderRadius: 14, minWidth: 200, alignItems: "center",
    borderWidth: 2, borderColor: ORANGE.border, ...cardShadow,
  },
  secondaryBtnText: { color: ORANGE.textMain, fontSize: 18, fontWeight: "900" },
});
